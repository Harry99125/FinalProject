/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Hospital;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import database.CRUDOperations;
import database.Connection;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import model.Business.Business;
import model.Hospital.Hospital;
import org.bson.Document;
import org.bson.types.ObjectId;

public class AddResidentDoctorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddResidentDoctorJPanel
     */
    JPanel hospitalCardLayout;
    Business business;
    Hospital hospital;
    MongoDatabase database;
    CRUDOperations crud = new CRUDOperations();
    MongoCollection<Document> trainingCenterCollection;
    MongoCollection<Document> trainingCenterCourseCollection;
    MongoCollection<Document> trainingCenterDoctorCollection;
    MongoCollection<Document> courseCollection;
    MongoCollection<Document> doctorCourseCollection;
    MongoCollection<Document> doctorCollection;
    MongoCollection<Document> doctorResidentCourseCollection;


    public AddResidentDoctorJPanel(JPanel cardSequencePanel, Hospital hospital, MongoDatabase database, Business business) {
        initComponents();
        this.hospitalCardLayout = cardSequencePanel;
        this.hospital = hospital;
        this.database = new Connection().connectToDatabase();
        this.trainingCenterCollection = this.database.getCollection("TrainingCenter");
        this.doctorCollection = this.database.getCollection("Doctor");
        this.doctorCourseCollection = this.database.getCollection("DoctorCourse");
        this.trainingCenterCourseCollection = this.database.getCollection("TrainingCenterCourse");
        this.courseCollection = this.database.getCollection("Course");
        this.trainingCenterDoctorCollection = this.database.getCollection("TrainingCenterDoctor");
        this.doctorResidentCourseCollection = this.database.getCollection("DoctorResidentCourse");
        populateTrainingCenterComboBox();
        populateCourseComboBox();
        // Listener to update courses based on selected training center
        trainingCenterComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                populateCourseComboBox();  // Refresh the courses list when a new training center is selected
            }
        });
        coursesComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Call the method to populate the instructor combo box based on the selected course
                populateInstructorComboBox();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddResidentDoctor = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtRDName = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        lblBlogPostHeader = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        trainingCenterComboBox = new javax.swing.JComboBox<>();
        instructorComboBox = new javax.swing.JComboBox<>();
        coursesComboBox = new javax.swing.JComboBox<>();
        btnAddResidentDoctor1 = new javax.swing.JButton();

        btnAddResidentDoctor.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnAddResidentDoctor.setText("Add Resident Doctor");
        btnAddResidentDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddResidentDoctorActionPerformed(evt);
            }
        });

        setBackground(new java.awt.Color(255, 228, 230));

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel1.setText("Name :");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel2.setText("Training Center :");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel4.setText("Courses :");

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblBlogPostHeader.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblBlogPostHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBlogPostHeader.setText("Add Resident Doctor");

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel5.setText("Instructor :");

        btnAddResidentDoctor1.setBackground(new java.awt.Color(244, 63, 94));
        btnAddResidentDoctor1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnAddResidentDoctor1.setForeground(new java.awt.Color(255, 255, 255));
        btnAddResidentDoctor1.setText("Add Resident Doctor");
        btnAddResidentDoctor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddResidentDoctor1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(lblBlogPostHeader))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addComponent(jLabel3)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtRDName)
                            .addComponent(trainingCenterComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(instructorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(coursesComboBox, 0, 230, Short.MAX_VALUE)
                            .addComponent(btnAddResidentDoctor1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(lblBlogPostHeader)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtRDName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(trainingCenterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(coursesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(instructorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAddResidentDoctor1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        ResidentDoctorsJPanel residentDoctorsJPanel = new ResidentDoctorsJPanel(hospitalCardLayout, hospital, database, business);
        hospitalCardLayout.add("ResidentDoctorsJPanel", residentDoctorsJPanel);
        CardLayout layout = (CardLayout) hospitalCardLayout.getLayout();
        layout.next(hospitalCardLayout);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddResidentDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddResidentDoctorActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnAddResidentDoctorActionPerformed

    private void btnAddResidentDoctor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddResidentDoctor1ActionPerformed
        // Collect the input data
        String doctorName = txtRDName.getText().trim();
        String selectedTrainingCenter = (String) trainingCenterComboBox.getSelectedItem();
        String selectedCourse = (String) coursesComboBox.getSelectedItem();
        String selectedInstructor = (String) instructorComboBox.getSelectedItem();

        // Validate the inputs
        if (doctorName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the doctor's name.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
//        check if doctor already exists in that hospital
        Document doctor = crud.getRecordByTwoKeys("hospitalId", String.valueOf(hospital.getHospitalId()), "doctorName", doctorName, doctorCollection);
        if (doctor == null) {
            JOptionPane.showMessageDialog(this, "Doctor does not exist in the hospital. Please add the doctor to the hospital first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //            check if doctor is already a resident doctor
        if (!doctor.getBoolean("isResidentDoctor")) {

//            if yes change isResidentDoctor to true
            int response = JOptionPane.showConfirmDialog(this, "Doctor already exists in the hospital. Do you want to add the doctor as a resident doctor?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION) {
                if (doctor.getBoolean("isInstructor")) {
                    JOptionPane.showMessageDialog(this, "Doctor is an instructor. Instructor cannot be a resident doctor.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
//                if he is not a resident doctor, update the field
            } else {
                // User chose NO or closed the dialog
                return;
            }
        }
        if (selectedTrainingCenter == null || selectedTrainingCenter.equals("No Training Centers Available")) {
            JOptionPane.showMessageDialog(this, "Please select a valid training center.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (selectedCourse == null || selectedCourse.equals("No Courses Available")) {
            JOptionPane.showMessageDialog(this, "Please select a valid course.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (selectedInstructor == null || selectedInstructor.equals("No Instructors Available")) {
            JOptionPane.showMessageDialog(this, "Please select a valid instructor.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get IDs safely
        ObjectId trainingCenterId = getObjectIdFromName(trainingCenterCollection, "trainingcenterName", selectedTrainingCenter);
        ObjectId courseId = getObjectIdFromName(courseCollection, "courseName", selectedCourse);
        ObjectId instructorId = getObjectIdFromName(doctorCollection, "doctorName", selectedInstructor);

        if (trainingCenterId == null || courseId == null || instructorId == null) {
            JOptionPane.showMessageDialog(this, "Invalid selection. Please check your choices.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // add course to doctor
        try {
            // Create a new document to store the doctor's details

            Document trainingCenterDoctorLink = new Document("doctorId", String.valueOf(doctor.getObjectId("_id"))).append("trainingCenterId", trainingCenterId.toString());
            trainingCenterDoctorCollection.insertOne(trainingCenterDoctorLink);

            Document doctorResidentCourseLink = new Document("doctorId", String.valueOf(doctor.getObjectId("_id"))).append("courseId", courseId.toString());
            doctorResidentCourseLink.append("courseStatus", "Registered");
            doctorResidentCourseCollection.insertOne(doctorResidentCourseLink);
            crud.updateBooleanField("doctorName", doctorName, "isResidentDoctor", true, doctorCollection);


            JOptionPane.showMessageDialog(this, "Resident doctor added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearForm();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error adding doctor to database: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddResidentDoctor1ActionPerformed

    private ObjectId getObjectIdFromName(MongoCollection<Document> collection, String key, String value) {
        Document doc = collection.find(new Document(key, value)).first();
        if (doc != null && doc.containsKey("_id")) {
            return doc.getObjectId("_id");
        }
        return null;
    }

    private void clearForm() {
        // Reset all input fields and comboboxes
        txtRDName.setText("");
        trainingCenterComboBox.setSelectedIndex(0);
        coursesComboBox.setSelectedIndex(0);
        instructorComboBox.setSelectedIndex(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddResidentDoctor;
    private javax.swing.JButton btnAddResidentDoctor1;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> coursesComboBox;
    private javax.swing.JComboBox<String> instructorComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblBlogPostHeader;
    private javax.swing.JComboBox<String> trainingCenterComboBox;
    private javax.swing.JTextField txtRDName;
    // End of variables declaration//GEN-END:variables

    private void populateTrainingCenterComboBox() {
        // Clear existing items
        trainingCenterComboBox.removeAllItems();

        // Fetch all training centers from the collection
        FindIterable<Document> trainingCenters = trainingCenterCollection.find();
        MongoCursor<Document> cursor = trainingCenters.iterator();

        try {
            while (cursor.hasNext()) {
                Document trainingCenter = cursor.next();
                String trainingCenterName = trainingCenter.getString("trainingcenterName");  // Assuming 'name' is the field key for training center names
                if (trainingCenterName != null && !trainingCenterName.isEmpty()) {
                    trainingCenterComboBox.addItem(trainingCenterName);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error retrieving training centers: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            cursor.close();  // Ensure the cursor is closed after use
        }
        if (trainingCenterComboBox.getItemCount() == 0) {
            trainingCenterComboBox.addItem("No Training Centers Available");
        }
    }

    private void populateCourseComboBox() {
        // Clear existing items
        coursesComboBox.removeAllItems();

        // Get the selected training center name from the combo box
        String selectedTrainingCenter = (String) trainingCenterComboBox.getSelectedItem();

        if (selectedTrainingCenter == null || selectedTrainingCenter.equals("No Training Centers Available")) {
            coursesComboBox.addItem("No Courses Available");
            return;
        }

        // Retrieve the _id of the selected training center
        Document trainingCenter = crud.getFirstRecordByKey("trainingcenterName", selectedTrainingCenter, trainingCenterCollection);
        if (trainingCenter == null) {
            JOptionPane.showMessageDialog(this, "Selected training center not found in database.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String trainingCenterId = trainingCenter.getObjectId("_id").toString();

        // Fetch all course IDs linked to this training center id from the TrainingCenterCourse collection
        FindIterable<Document> courses = trainingCenterCourseCollection.find(new Document("trainingCenterId", trainingCenterId));
        MongoCursor<Document> courseCursor = courses.iterator();

        if (!courseCursor.hasNext()) {
            coursesComboBox.addItem("No Courses Available");
            courseCursor.close();
            return;
        }

        try {
            while (courseCursor.hasNext()) {
                Document courseDoc = courseCursor.next();
                String courseId = courseDoc.getString("courseId");

                // Fetch the course name using the courseId from the Course collection
                Document course = courseCollection.find(new Document("_id", new ObjectId(courseId))).first();
                if (course == null) {
                    continue;
                }
                String courseName = course.getString("courseName");
                coursesComboBox.addItem(courseName);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error retrieving courses: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            courseCursor.close();
        }

        if (coursesComboBox.getItemCount() == 0) {
            coursesComboBox.addItem("No Courses Available");
        }
    }

    private void populateInstructorComboBox() {
        // Clear existing items
        instructorComboBox.removeAllItems();

        // Get the selected course name from the combo box
        String selectedCourse = (String) coursesComboBox.getSelectedItem();

        if (selectedCourse == null || selectedCourse.equals("No Courses Available")) {
            instructorComboBox.addItem("No Instructors Available");
            return;
        }

        // Retrieve the _id of the selected course
        Document course = crud.getFirstRecordByKey("courseName", selectedCourse, courseCollection);
        if (course == null) {
            JOptionPane.showMessageDialog(this, "Selected course not found in database.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String courseId = course.getObjectId("_id").toString();

        // Fetch all doctor IDs linked to this course ID from the DoctorCourse collection
        FindIterable<Document> doctors = doctorCourseCollection.find(new Document("courseId", courseId));
        MongoCursor<Document> doctorCursor = doctors.iterator();

        if (!doctorCursor.hasNext()) {
            instructorComboBox.addItem("No Instructors Available");
            doctorCursor.close();
            return;
        }

        try {
            while (doctorCursor.hasNext()) {
                Document doctorCourseDoc = doctorCursor.next();
                String doctorId = doctorCourseDoc.getString("doctorId");

                // Fetch the doctor name using the doctorId from the Doctor collection
                Document doctor = doctorCollection.find(new Document("_id", new ObjectId(doctorId))).first();
                if (doctor != null) {
                    String doctorName = doctor.getString("doctorName");
                    instructorComboBox.addItem(doctorName);
                } else {
                    System.out.println("Doctor not found for ID: " + doctorId);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error retrieving instructors: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            doctorCursor.close();
        }

        if (instructorComboBox.getItemCount() == 0) {
            instructorComboBox.addItem("No Instructors Available");
        }
    }


}
