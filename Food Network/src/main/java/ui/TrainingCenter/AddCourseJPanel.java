/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.TrainingCenter;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import database.CRUDOperations;
import database.Connection;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import model.Business.Business;
import model.TrainingCenter.TrainingCenter;
import org.bson.Document;
import org.bson.conversions.Bson;


public class AddCourseJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddCourseJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    TrainingCenter trainingcenter;
    MongoDatabase database;
    CRUDOperations crud = new CRUDOperations();

    public AddCourseJPanel(JPanel cardSequencePanel, TrainingCenter trainingcenter, MongoDatabase database, Business business) {
        initComponents();
        this.CardSequencePanel = cardSequencePanel;
        this.trainingcenter = trainingcenter;
        this.database = new Connection().connectToDatabase();
        populateInstructorComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCourseName = new javax.swing.JLabel();
        lblCourseNumber = new javax.swing.JLabel();
        lblCourseDomain = new javax.swing.JLabel();
        lblCourseDuration = new javax.swing.JLabel();
        lblCourseInstructor = new javax.swing.JLabel();
        txtCourseName = new javax.swing.JTextField();
        txtCourseNumber = new javax.swing.JTextField();
        txtCourseDomain = new javax.swing.JTextField();
        txtCourseDuration = new javax.swing.JTextField();
        btnSaveCourse = new javax.swing.JButton();
        instructorComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(241, 206, 255));

        lblCourseName.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblCourseName.setText("Name :");

        lblCourseNumber.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblCourseNumber.setText("Number :");

        lblCourseDomain.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblCourseDomain.setText("Domain :");

        lblCourseDuration.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblCourseDuration.setText("Duration :");

        lblCourseInstructor.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblCourseInstructor.setText("Instructor :");

        btnSaveCourse.setBackground(new java.awt.Color(150, 83, 178));
        btnSaveCourse.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnSaveCourse.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveCourse.setText("Save");
        btnSaveCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveCourseActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ADD COURSE ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCourseInstructor)
                    .addComponent(lblCourseDuration)
                    .addComponent(lblCourseDomain)
                    .addComponent(lblCourseNumber)
                    .addComponent(lblCourseName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCourseName, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                    .addComponent(txtCourseNumber)
                    .addComponent(txtCourseDomain)
                    .addComponent(txtCourseDuration)
                    .addComponent(btnSaveCourse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(instructorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(180, 180, 180))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCourseDomain, txtCourseDuration, txtCourseName, txtCourseNumber});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCourseName)
                    .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseNumber)
                    .addComponent(txtCourseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseDomain)
                    .addComponent(txtCourseDomain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseDuration)
                    .addComponent(txtCourseDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseInstructor)
                    .addComponent(instructorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(btnSaveCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveCourseActionPerformed
        // TODO add your handling code here:
        // Retrieve inputs from GUI components
        String courseName = txtCourseName.getText();
        String courseNumber = txtCourseNumber.getText();
        String courseDomain = txtCourseDomain.getText();
        String courseDuration = txtCourseDuration.getText();
        String instructor = (String) instructorComboBox.getSelectedItem();

        // Input validation
        if (courseName.isEmpty() || courseNumber.isEmpty() || courseDomain.isEmpty() ||
                courseDuration.isEmpty() || instructor == null || instructor.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields must be filled. Course not added.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Additional validations
        if (!courseNumber.matches("^[A-Z]{3}\\d{4}$")) {
            JOptionPane.showMessageDialog(null, "Course number must follow the pattern ABC1234.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!courseDuration.matches("^\\d+\\sweeks$|^\\d+\\smonths$")) {
            JOptionPane.showMessageDialog(null, "Course duration must be in the format of 'X weeks' or 'X months'.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Establish a connection to the MongoDB database
        MongoCollection<Document> collection = database.getCollection("Course");

        // Create a new document for the course
        Document newCourse = new Document("courseName", courseName)
                .append("courseNumber", courseNumber)
                .append("courseDomain", courseDomain)
                .append("courseDuration", courseDuration)
                .append("instructor", instructor);

        // Insert the new course document into the collection
        collection.insertOne(newCourse);
        JOptionPane.showMessageDialog(null, "New course added successfully: " + courseName, "Success", JOptionPane.INFORMATION_MESSAGE);
//        insert taringcenterid and courseid in trainingcentercourse collection
        MongoCollection<Document> trainingCenterCourseCollection = database.getCollection("TrainingCenterCourse");
        Document trainingCenterCourse = new Document("trainingCenterId", String.valueOf(trainingcenter.getTrainingCenterId()))
                .append("courseId", String.valueOf(newCourse.getObjectId("_id")));
        trainingCenterCourseCollection.insertOne(trainingCenterCourse);
//        insert courseid and doctorid in DoctorCourse collection
        MongoCollection<Document> doctorCourseCollection = database.getCollection("DoctorCourse");
        MongoCollection<Document> doctorCollection = database.getCollection("Doctor");
        Document doctor = crud.getFirstRecordByKey("doctorName", instructor, doctorCollection);
        Document doctorCourse = new Document("doctorId", String.valueOf(doctor.getObjectId("_id")))
                .append("courseId", String.valueOf(newCourse.getObjectId("_id")));
        doctorCourseCollection.insertOne(doctorCourse);
        txtCourseName.setText("");
        txtCourseNumber.setText("");
        txtCourseDomain.setText("");
        txtCourseDuration.setText("");
    }//GEN-LAST:event_btnSaveCourseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveCourse;
    private javax.swing.JComboBox<String> instructorComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblCourseDomain;
    private javax.swing.JLabel lblCourseDuration;
    private javax.swing.JLabel lblCourseInstructor;
    private javax.swing.JLabel lblCourseName;
    private javax.swing.JLabel lblCourseNumber;
    private javax.swing.JTextField txtCourseDomain;
    private javax.swing.JTextField txtCourseDuration;
    private javax.swing.JTextField txtCourseName;
    private javax.swing.JTextField txtCourseNumber;
    // End of variables declaration//GEN-END:variables

    private void populateInstructorComboBox() {
        MongoCollection<Document> collection = database.getCollection("Doctor");
        // Create a filter to find all doctors who are instructors
        Bson filter = Filters.eq("isInstructor", true);
        // Fetch all documents from the collection that match the filter
        FindIterable<Document> doctors = collection.find(filter);
        for (Document status : doctors) {
            String doctorName = status.getString("doctorName");
            instructorComboBox.addItem(doctorName);
        }
    }
}
