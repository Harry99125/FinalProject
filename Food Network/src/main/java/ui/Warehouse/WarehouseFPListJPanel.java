/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Warehouse;

import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import database.CRUDOperations;
import database.Connection;
import model.Business.Business;

import org.bson.Document;
import org.bson.types.ObjectId;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import model.Warehouse.Warehouse;
import service.FileSaver;

public class WarehouseFPListJPanel extends javax.swing.JPanel {

    /**
     * Creates new form WarehousePListJPanel
     */
    JPanel cardSequencePanel;
    Business business;
    Warehouse warehouse;
    MongoDatabase database;
    MongoCollection<Document> collection;
    MongoCollection<Document> produceCollection;
        MongoCollection<Document> productCollection;

    MongoCollection<Document> FarmCollection;
    MongoCollection<Document> FactoryCollection;
    CRUDOperations crud = new CRUDOperations();

    public WarehouseFPListJPanel(JPanel cardSequencePanel, Business business, Warehouse warehouse, MongoDatabase prevdatabase) {
        initComponents();
        this.cardSequencePanel = cardSequencePanel;
        this.business = business;
        this.warehouse = warehouse;
        this.database = new Connection().connectToDatabase();
        this.collection = this.database.getCollection("WarehouseProduce");
        this.produceCollection = this.database.getCollection("Produce");
        this.FarmCollection = this.database.getCollection("FarmerProduce");
        this.FactoryCollection = this.database.getCollection("FactoryProduct");
        this.productCollection = this.database.getCollection("Product");
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tableProduceList.getModel();
        model.setRowCount(0); // Clear existing rows in the table

        try {
            // Fetch and display data from FactoryProduct
            FindIterable<Document> factoryProducts = FactoryCollection.find();
            try (MongoCursor<Document> cursor = factoryProducts.iterator()) {
                while (cursor.hasNext()) {
                    Document factoryProductDoc = cursor.next();
                    ObjectId productId = new ObjectId(factoryProductDoc.getString("productId"));

                    // Fetch product details from Produce collection (assuming same collection for simplicity)
                    Document productDoc = crud.getFirstRecordByKey("_id", productId, productCollection);

                    if (productDoc != null) {
                        Object[] row = new Object[]{
                            productDoc.getString("productName"), // Or "productName" if using a different collection
                            productDoc.getString("productDescription"), // Or "productCategory"
                            factoryProductDoc.getInteger("quantity"),
                            "Factory: " + factoryProductDoc.getString("factoryId")
                        };
                        model.addRow(row); // Add the row to the table model
                    } else {
                        System.err.println("No product found for ID: " + productId);
                    }
                }
            }

        } catch (Exception e) {
            System.err.println("Error populating table: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error fetching data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableProduceList = new javax.swing.JTable();
        btnGetReport = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        tableProduceList.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        tableProduceList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Description", "Quantity", "Farmer Name"
            }
        ));
        jScrollPane1.setViewportView(tableProduceList);

        btnGetReport.setBackground(new java.awt.Color(204, 0, 0));
        btnGetReport.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnGetReport.setForeground(new java.awt.Color(255, 255, 255));
        btnGetReport.setText("Get Report");
        btnGetReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnGetReport, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnGetReport)
                .addContainerGap(95, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetReportActionPerformed
        // TODO add your handling code here:
        ArrayList<String> columnNames = new ArrayList<>();
        columnNames.add("Name");
        columnNames.add("Category");
        columnNames.add("Quantity");
        FileSaver fileSaver = new FileSaver(tableProduceList, warehouse.getWarehouseName(), columnNames);
        fileSaver.saveFile();
    }//GEN-LAST:event_btnGetReportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGetReport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableProduceList;
    // End of variables declaration//GEN-END:variables

}
