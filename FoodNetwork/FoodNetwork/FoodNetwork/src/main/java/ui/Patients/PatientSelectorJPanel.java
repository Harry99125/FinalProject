/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Patients;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import database.CRUDOperations;
import database.Connection;
import java.awt.CardLayout;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Business.Business;
import model.Personnel.Doctor;
import org.bson.Document;
import org.bson.types.ObjectId;
import ui.Blogs.BlogViewJPanel;
import ui.Patients.*;


public class PatientSelectorJPanel extends javax.swing.JPanel {

    JPanel CardSequencePanel;
    Business business;
    MongoDatabase database;
    ObjectId doctorId;
    CRUDOperations crud = new CRUDOperations();
    MongoCollection<Document> doctorCollection;
    MongoCollection<Document> patientCollection;
    MongoCollection<Document> doctorPatientCollection;
    /**
     * Creates new form BlogSelectorJPanel
     */
    public PatientSelectorJPanel(JPanel cardSequencePanel, MongoDatabase database, Business business, ObjectId doctorId) {
        initComponents();
        this.CardSequencePanel = cardSequencePanel;
        this.database = database;
        this.business = business;
        this.doctorId = doctorId;
        this.database = new Connection().connectToDatabase();
        this.doctorCollection = this.database.getCollection("Doctor");
        this.patientCollection = this.database.getCollection("Patient");
        this.doctorPatientCollection = this.database.getCollection("DoctorPatient");
        Document doctorDoc = crud.getFirstRecordByKey("_id", this.doctorId, doctorCollection);
        txtDoctorName.setText(doctorDoc.getString("doctorName"));
        populatePatientTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePatientReportList = new javax.swing.JTable();
        btnViewPatientDetails = new javax.swing.JButton();
        lblBlogPostHeader = new javax.swing.JLabel();
        txtDoctorName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnDownloadpatientData = new javax.swing.JButton();

        tablePatientReportList.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        tablePatientReportList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Name", "Last visit", "Condition", "Contact"
            }
        ));
        jScrollPane1.setViewportView(tablePatientReportList);

        btnViewPatientDetails.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnViewPatientDetails.setText("View Details");
        btnViewPatientDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPatientDetailsActionPerformed(evt);
            }
        });

        lblBlogPostHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBlogPostHeader.setText("Patient List");

        txtDoctorName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorNameActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel1.setText("Doctor Name :");

        btnDownloadpatientData.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnDownloadpatientData.setText("Download Patient Data");
        btnDownloadpatientData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadpatientDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBlogPostHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnViewPatientDetails)
                            .addGap(24, 24, 24)
                            .addComponent(btnDownloadpatientData))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblBlogPostHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewPatientDetails)
                    .addComponent(btnDownloadpatientData))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewPatientDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPatientDetailsActionPerformed
        // Get the selected row index
        int selectedRowIndex = tablePatientReportList.getSelectedRow();
        if (selectedRowIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) tablePatientReportList.getModel();

            // Extract patient details from the table
            String patientName = model.getValueAt(selectedRowIndex, 0).toString();  // Assuming the patient ID is stored in the first column
            Document patient = crud.getFirstRecordByKey("name", patientName, patientCollection);
            ObjectId patientId = patient.getObjectId("_id");
            System.out.println(patientId);
            // Instantiate the PatientReportJPanel with selected patient details
            PatientReportJPanel patientReportJPanel = new PatientReportJPanel(CardSequencePanel, database, business, patientId);
            CardSequencePanel.add("patientReportJPanel", patientReportJPanel);
            CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
            layout.next(CardSequencePanel);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a patient from the table to view details.", "No Selection", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnViewPatientDetailsActionPerformed

    private void txtDoctorNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorNameActionPerformed

    private void btnDownloadpatientDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadpatientDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDownloadpatientDataActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDownloadpatientData;
    private javax.swing.JButton btnViewPatientDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBlogPostHeader;
    private javax.swing.JTable tablePatientReportList;
    private javax.swing.JTextField txtDoctorName;
    // End of variables declaration//GEN-END:variables

    private void populatePatientTable() {
    DefaultTableModel model = (DefaultTableModel) tablePatientReportList.getModel();
    model.setRowCount(0);  // Clear existing rows

    // Using the CRUD operation to find linked patients
    FindIterable<Document> linkedPatients = crud.getRecordsByKey("doctorId", doctorId.toHexString(), doctorPatientCollection);
    MongoCursor<Document> cursor = linkedPatients.iterator();

    try {
        if (!cursor.hasNext()) {
            System.out.println("No linked patients for Doctor ID: " + doctorId);
            JOptionPane.showMessageDialog(this, "No patients are linked to this doctor.");
            return;
        }

        while (cursor.hasNext()) {
            Document doc = cursor.next();
            ObjectId patientId = extractObjectId(doc, "patientId");

            if (patientId != null) {
                Document patient = this.database.getCollection("Patient").find(new Document("_id", patientId)).first();
                if (patient != null) {
                    Object[] row = new Object[4];
                    row[0] = patient.getString("name");
                    row[1] = patient.getString("lastVisit");
                    row[2] = patient.getString("condition");
                    row[3] = patient.getString("phoneNumber");
                    model.addRow(row);
                    System.out.println("Patient Details Added: " + Arrays.toString(row));
                } else {
                    System.out.println("No patient found with ID: " + patientId);
                }
            } else {
                System.out.println("Invalid or null patientId encountered.");
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "An error occurred while accessing the database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } finally {
        cursor.close();
    }
}

private ObjectId extractObjectId(Document document, String key) {
    try {
        if (document.get(key) instanceof ObjectId) {
            return document.getObjectId(key);
        } else if (document.get(key) instanceof String) {
            return new ObjectId(document.getString(key));
        }
    } catch (IllegalArgumentException e) {
        System.out.println("Error converting string to ObjectId: " + e.getMessage());
    }
    return null;
}

}
