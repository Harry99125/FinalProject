/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Pharmacy;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

import com.mongodb.Block;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.opencsv.CSVWriter;
import database.CRUDOperations;
import database.Connection;
import model.Business.Business;
import model.Pharmacy.Medicine;
import model.Pharmacy.Pharmacy;
import org.bson.Document;
import org.bson.types.ObjectId;

import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import service.FileSaver;


public class MedicineListJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MedicineListJPanel
     */
    JPanel cardSequencePanel;
    Business business;
    Pharmacy pharmacy;
    MongoDatabase database;
    MongoCollection<Document> collection;
    MongoCollection<Document> medicineCollection;
    CRUDOperations crud = new CRUDOperations();

    public MedicineListJPanel(JPanel cardSequencePanel, Business business, Pharmacy pharmacy, MongoDatabase prevdatabase) {
        initComponents();
        this.cardSequencePanel = cardSequencePanel;
        this.business = business;
        this.pharmacy = pharmacy;
        this.database = new Connection().connectToDatabase();
        this.collection = this.database.getCollection("PharmacyMedicine");
        this.medicineCollection = this.database.getCollection("Medicine");
        populateFilterComboBox();
        populateSearchComboBox();
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tableMedicineList.getModel();
        model.setRowCount(0);
        String pharmacyId = pharmacy.getId().toString();
        FindIterable<Document> findIterable = crud.getRecordsByKey("pharmacyId", pharmacyId, collection);
        MongoCursor<Document> cursor = findIterable.iterator();
        try {
            while (cursor.hasNext()) {
                Document doc = cursor.next();
                Object[] row = new Object[3];
                ObjectId medicineId = new ObjectId(doc.getString("medicineId"));
                Document medicineDoc = crud.getFirstRecordByKey("_id", medicineId, medicineCollection);
                row[0] = medicineDoc.getString("medicineName");
                row[1] = medicineDoc.getString("medicineCategory");
                row[2] = doc.getInteger("stockQuantity");
                model.addRow(row);
            }
        } finally {
            cursor.close();
        }

    }

    private void populateFilterComboBox() {
        FilterComboBox.removeAllItems();
        FilterComboBox.addItem("All");
        FilterComboBox.addItem("Category");
    }

    private void populateSearchComboBox() {
        String filter = FilterComboBox.getSelectedItem().toString();
        SearchComboBox.removeAllItems();  // Clear existing items

        if (filter.equals("All")) {
            SearchComboBox.addItem("All");
        } else if (filter.equals("Category")) {
            // Fetching categories from the MongoDB collection
            MongoCollection<Document> categoriesCollection = database.getCollection("MedicineCategory");
            MongoCursor<Document> cursor = categoriesCollection.find().iterator();

            try {
                while (cursor.hasNext()) {
                    Document doc = cursor.next();
                    String categoryName = doc.getString("categoryName");
                    SearchComboBox.addItem(categoryName);
                }
            } finally {
                cursor.close();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableMedicineList = new javax.swing.JTable();
        SearchComboBox = new javax.swing.JComboBox<>();
        btnGetReport = new javax.swing.JButton();
        btnGetDetails = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FilterComboBox = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();

        setBackground(new java.awt.Color(206, 238, 251));

        tableMedicineList.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        tableMedicineList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Category", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(tableMedicineList);

        SearchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchComboBoxActionPerformed(evt);
            }
        });

        btnGetReport.setBackground(new java.awt.Color(204, 0, 0));
        btnGetReport.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnGetReport.setForeground(new java.awt.Color(255, 255, 255));
        btnGetReport.setText("Get Report");
        btnGetReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetReportActionPerformed(evt);
            }
        });

        btnGetDetails.setBackground(new java.awt.Color(0, 153, 51));
        btnGetDetails.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnGetDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnGetDetails.setText("Get Details");
        btnGetDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetDetailsActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(0, 153, 204));
        btnAdd.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel1.setText("To Search for:");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel2.setText("Filter By :");

        FilterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterComboBoxActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(0, 0, 0));
        btnSearch.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnGetDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGetReport, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(FilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(SearchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnGetDetails, btnGetReport});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {FilterComboBox, SearchComboBox});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(FilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(SearchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGetReport)
                    .addComponent(btnGetDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAdd, btnGetDetails, btnGetReport});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {FilterComboBox, SearchComboBox});

    }// </editor-fold>//GEN-END:initComponents

    private void FilterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterComboBoxActionPerformed
        // TODO add your handling code here:
        populateSearchComboBox();
    }//GEN-LAST:event_FilterComboBoxActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        UpdateMedicineJPanel updateMedicineJPanel = new UpdateMedicineJPanel(cardSequencePanel, business, pharmacy, null, database);
        cardSequencePanel.add("UpdateMedicineJPanel", updateMedicineJPanel);
        CardLayout layout = (CardLayout) cardSequencePanel.getLayout();
        layout.next(cardSequencePanel);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnGetDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableMedicineList.getSelectedRow();
        if (selectedRow >= 0) {
            String medicineName = tableMedicineList.getValueAt(selectedRow, 0).toString();
            System.out.println("Mwdicine name :" + medicineName);
            UpdateMedicineJPanel updateMedicineJPanel = new UpdateMedicineJPanel(cardSequencePanel, business, pharmacy, medicineName, database);
            cardSequencePanel.add("UpdateMedicineJPanel", updateMedicineJPanel);
            CardLayout layout = (CardLayout) cardSequencePanel.getLayout();
            layout.next(cardSequencePanel);
        }
    }//GEN-LAST:event_btnGetDetailsActionPerformed

    private void SearchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchComboBoxActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String selectedFilter = FilterComboBox.getSelectedItem().toString();
        String selectedCategory = SearchComboBox.getSelectedItem().toString();
        System.out.println("Search Button: Filter = " + selectedFilter + ", Category = " + selectedCategory);

        // Check if 'All' is selected in both FilterComboBox and SearchComboBox
        if ("All".equals(selectedFilter) && "All".equals(selectedCategory)) {
            System.out.println("Fetching all medicines");
            populateTable(); // Call populateTable to fetch all entries
        } else {
            // Call populateTableByCategory with the selected category if not 'All'
            populateTableByCategory(selectedCategory);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnGetReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetReportActionPerformed
        // TODO add your handling code here:
        ArrayList<String> columnNames = new ArrayList<>();
        columnNames.add("Name");
        columnNames.add("Category");
        columnNames.add("Quantity");
        FileSaver fileSaver = new FileSaver(tableMedicineList, pharmacy.getPharmacyName(), columnNames);
        fileSaver.saveFile();
    }//GEN-LAST:event_btnGetReportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> FilterComboBox;
    private javax.swing.JComboBox<Object> SearchComboBox;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnGetDetails;
    private javax.swing.JButton btnGetReport;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableMedicineList;
    // End of variables declaration//GEN-END:variables

    private void populateTableByCategory(String category) {
        DefaultTableModel model = (DefaultTableModel) tableMedicineList.getModel();
        model.setRowCount(0);  // Clear the table
        String pharmacyId = pharmacy.getId().toString();
        MongoCollection<Document> medicineCollection = database.getCollection("Medicine");
        FindIterable<Document> iterable;

        // Check if category is not 'All' and use the correct field name
        if (!"All".equals(category)) {
            System.out.println("Filtering by category: " + category);
            iterable = medicineCollection.find(Filters.eq("medicineCategory", category));
        } else {
            System.out.println("Fetching all medicines");
            iterable = medicineCollection.find();
        }
        try (MongoCursor<Document> cursor = iterable.iterator()) {
            if (!cursor.hasNext()) {
                System.out.println("No documents found");
            }
            while (cursor.hasNext()) {
                Document doc = cursor.next();
                System.out.println("Document found: " + doc.toJson());
                ObjectId medId = doc.getObjectId("_id");
                Document stockDoc;
                try {
                    stockDoc = crud.getRecordByTwoKeys("medicineId", medId.toString(), "pharmacyId", pharmacyId, database.getCollection("PharmacyMedicine"));
                    if (stockDoc == null || stockDoc.getInteger("stockQuantity") == null) {
                        JOptionPane.showMessageDialog(null, "No stock data available for the selected category.", "Data Error", JOptionPane.ERROR_MESSAGE);
                        return; // Exit the method or skip adding this row
                    }
                    int stockValue = stockDoc.getInteger("stockQuantity");
                    Object[] row = new Object[]{
                            doc.getString("medicineName"),
                            doc.getString("medicineCategory"),
                            stockValue
                    };
                    model.addRow(row);  // Add rows to the table model
                } catch (Exception e) {
                    System.err.println("Error fetching stock data: " + e.getMessage());
                    JOptionPane.showMessageDialog(null, "Error fetching stock data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            System.err.println("Error fetching data: " + e.getMessage());
            e.printStackTrace();
        }
    }

}
