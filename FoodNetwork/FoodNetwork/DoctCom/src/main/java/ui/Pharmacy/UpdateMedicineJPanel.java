/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Pharmacy;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import database.CRUDOperations;
import database.Connection;
import javax.swing.*;

import model.Business.Business;
import model.Pharmacy.Pharmacy;

import java.awt.*;
import org.bson.Document;


public class UpdateMedicineJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddMedicineJPanel
     */
    JPanel cardSequencePanel;
    Business business;
    Pharmacy pharmacy;
    MongoDatabase database;
    CRUDOperations crud = new CRUDOperations();
    MongoCollection<Document> collection;
    String medicineName;
    Boolean addMedicine = false;

    public UpdateMedicineJPanel(JPanel cardSequencePanel, Business business, Pharmacy pharmacy, String medicineName, MongoDatabase database) {
        initComponents();
        this.cardSequencePanel = cardSequencePanel;
        this.business = business;
        this.pharmacy = pharmacy;
        this.database = new Connection().connectToDatabase();
        this.collection = this.database.getCollection("PharmacyMedicine");
        this.medicineName = medicineName;
        populateCategoryComboBox();
        if (medicineName != null) {
            String pharmacyName = pharmacy.getPharmacyName();
            Document med = crud.getFirstRecordByKey("medicineName", medicineName, this.database.getCollection("Medicine"));
            Document pharm = crud.getFirstRecordByKey("pharmacyName", pharmacyName, this.database.getCollection("Pharmacy"));
            String medId = med.getObjectId("_id").toString();
            String pharmId = pharm.getObjectId("_id").toString();
            Document pharmacyMedicine = crud.getRecordByTwoKeys("medicineId", medId, "pharmacyId", pharmId, collection);
            
            txtMedicineName.setText(med.getString("medicineName"));
            String medCategory = med.getString("medicineCategory");
            CategoryComboBox.setSelectedItem(medCategory);
            txtMedicineUsage.setText(med.getString("medicineUsage"));
            txtMedicineComposition.setText(med.getString("medicineComposition"));
            txtMedicinePrice.setText(pharmacyMedicine.getString("pharmacyPrice"));
            txtMedicineQuantity.setText(String.valueOf(pharmacyMedicine.getInteger("stockQuantity")));
            txtMedicineDescription.setText(med.getString("medicineDescription"));
            
//          disable text fields
            txtMedicineName.setEnabled(false);
            CategoryComboBox.setEnabled(false);
            txtMedicineUsage.setEnabled(false);
            txtMedicineComposition.setEnabled(false);
            txtMedicineDescription.setEnabled(false);
        } else {
            addMedicine = true;
            txtMedicineName.setText("");
            txtMedicineUsage.setText("");
            txtMedicineComposition.setText("");
            txtMedicinePrice.setText("");
            txtMedicineQuantity.setText("");
            txtMedicineDescription.setText("");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtMedicineName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMedicineDescription = new javax.swing.JTextArea();
        txtMedicineUsage = new javax.swing.JTextField();
        txtMedicineComposition = new javax.swing.JTextField();
        txtMedicinePrice = new javax.swing.JTextField();
        txtMedicineQuantity = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        CategoryComboBox = new javax.swing.JComboBox<>();
        lblMedicineDetails = new javax.swing.JLabel();

        setBackground(new java.awt.Color(206, 238, 251));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel2.setText("Medicine Name :");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel3.setText("Composition :");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel4.setText("Quantity :");

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel7.setText("Medicine Price :");

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel8.setText("Category :");

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel9.setText("Usage :");

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel10.setText("Description :");

        txtMedicineName.setPreferredSize(new java.awt.Dimension(130, 30));

        txtMedicineDescription.setColumns(20);
        txtMedicineDescription.setRows(5);
        txtMedicineDescription.setPreferredSize(new java.awt.Dimension(130, 30));
        jScrollPane1.setViewportView(txtMedicineDescription);

        txtMedicineUsage.setPreferredSize(new java.awt.Dimension(130, 30));

        txtMedicineComposition.setPreferredSize(new java.awt.Dimension(130, 30));

        txtMedicinePrice.setPreferredSize(new java.awt.Dimension(130, 30));

        txtMedicineQuantity.setPreferredSize(new java.awt.Dimension(130, 30));

        btnSave.setBackground(new java.awt.Color(0, 153, 204));
        btnSave.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Update Medicine");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        CategoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryComboBoxActionPerformed(evt);
            }
        });

        lblMedicineDetails.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblMedicineDetails.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMedicineDetails.setText("MEDICINE DETAILS");
        lblMedicineDetails.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(lblMedicineDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(34, 34, 34)
                                .addComponent(txtMedicineName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel3))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtMedicineComposition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtMedicineUsage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtMedicinePrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtMedicineQuantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(103, 103, 103))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, txtMedicineComposition, txtMedicineName, txtMedicinePrice, txtMedicineQuantity, txtMedicineUsage});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblMedicineDetails)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMedicineName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtMedicineUsage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMedicineComposition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMedicinePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMedicineQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {CategoryComboBox, txtMedicineName, txtMedicineUsage});

    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (txtMedicineName.getText().isEmpty() ||
            txtMedicineUsage.getText().isEmpty() || 
            txtMedicineComposition.getText().isEmpty() ||
            txtMedicinePrice.getText().isEmpty() || 
            txtMedicineQuantity.getText().isEmpty() ||
            txtMedicineDescription.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please fill all the details");
                return;
        }

        // Validate and parse the quantity
        String input = txtMedicineQuantity.getText();
        int quantity = 0;
        try {
            quantity = Integer.parseInt(input);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter an integer value for stock quantity", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return; // Stop further processing
        }

        // Validate the price format
        String price = txtMedicinePrice.getText();
        if (!price.matches("\\$\\d+\\.\\d{2}")) {
            JOptionPane.showMessageDialog(null, "Please enter the price in the format such as $10.99, $0.99, or $1234.00", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return; // Stop further processing
        }

        // Get pharmacy and category details
        String pharmacyName = pharmacy.getPharmacyName();
        Document pharm = crud.getFirstRecordByKey("pharmacyName", pharmacyName, this.database.getCollection("Pharmacy"));
        String pharmId = pharm.getObjectId("_id").toString();
        String selectedCategory = CategoryComboBox.getSelectedItem().toString();  // Get the selected category from JComboBox

        if (!addMedicine) {
            // Update existing medicine record
            Document med = crud.getFirstRecordByKey("medicineName", txtMedicineName.getText(), this.database.getCollection("Medicine"));
            String medId = med.getObjectId("_id").toString();
            Document pharmacyMedicine = crud.getRecordByTwoKeys("medicineId", medId, "pharmacyId", pharmId, collection);
            pharmacy.updatePharmacyMedicine(quantity, price, pharmacyMedicine.getObjectId("_id"), collection);
            backAction();
        } else {
            // Add new medicine record
            String medicineName = txtMedicineName.getText();
            String medicineUsage = txtMedicineUsage.getText();
            String medicineComposition = txtMedicineComposition.getText();
            String medicineDescription = txtMedicineDescription.getText();

            Document med = crud.getFirstRecordByKey("medicineName", medicineName, this.database.getCollection("Medicine"));
            if (med != null) {
                String medId = med.getObjectId("_id").toString();
                Document existingEntry = crud.getRecordByTwoKeys("medicineId", medId, "pharmacyId", pharmId, this.database.getCollection("PharmacyMedicine"));
                if (existingEntry != null) {
                    JOptionPane.showMessageDialog(null, "Medicine already present in pharmacy");
                } else {
                    Document newPharmacyMedicine = new Document()
                        .append("pharmacyId", pharmId)
                        .append("medicineId", medId)
                        .append("stockQuantity", quantity)
                        .append("pharmacyPrice", price);
                    this.database.getCollection("PharmacyMedicine").insertOne(newPharmacyMedicine);
                    JOptionPane.showMessageDialog(null, "Medicine added to the pharmacy");
                }
            } else {
                // Insert new medicine record
                Document newMedicine = new Document()
                    .append("medicineName", medicineName)
                    .append("medicineUsage", medicineUsage)
                    .append("medicineComposition", medicineComposition)
                    .append("medicineDescription", medicineDescription)
                    .append("medicineCategory", selectedCategory)  // Append selected category
                    .append("medicinePrice", price);
                this.database.getCollection("Medicine").insertOne(newMedicine);
                String newMedId = newMedicine.getObjectId("_id").toString();

                Document newPharmacyMedicine = new Document()
                    .append("pharmacyId", pharmId)
                    .append("medicineId", newMedId)
                    .append("stockQuantity", quantity)
                    .append("pharmacyPrice", price);
                this.database.getCollection("PharmacyMedicine").insertOne(newPharmacyMedicine);
                JOptionPane.showMessageDialog(null, "New medicine added and linked with the pharmacy");
            }
            backAction();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void CategoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CategoryComboBoxActionPerformed

    private void backAction() {
        cardSequencePanel.remove(this);
        CardLayout layout = (CardLayout) cardSequencePanel.getLayout();
        layout.previous(cardSequencePanel);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CategoryComboBox;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMedicineDetails;
    private javax.swing.JTextField txtMedicineComposition;
    private javax.swing.JTextArea txtMedicineDescription;
    private javax.swing.JTextField txtMedicineName;
    private javax.swing.JTextField txtMedicinePrice;
    private javax.swing.JTextField txtMedicineQuantity;
    private javax.swing.JTextField txtMedicineUsage;
    // End of variables declaration//GEN-END:variables

    private void populateCategoryComboBox() {
        CategoryComboBox.removeAllItems();
        String[] categories = {"Antibiotic", "Analgesic", "Antiseptic", "Antihistamine", "Antiviral", "Antifungal", "Vaccine", "Steroid"};
        for (String category : categories) {
            CategoryComboBox.addItem(category);
        }
    }
}
