/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Hospital;

import ui.TrainingCenter.*;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import database.CRUDOperations;
import database.Connection;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Business.Business;
import model.Hospital.Hospital;
import model.TrainingCenter.TrainingCenter;
import org.bson.Document;
import org.bson.types.ObjectId;



public class ViewRDDetailsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewDetailsJPanel
     */
    
    JPanel CardSequencePanel;
    Business business;
    Hospital hospital;
    MongoDatabase database;
    CRUDOperations crud = new CRUDOperations();
    MongoCollection<Document> doctorCollection;
    MongoCollection<Document> courseCollection;
    MongoCollection<Document> doctorResidentCourse;
    MongoCollection<Document> doctorCourse;
    public ViewRDDetailsJPanel(JPanel cardSequencePanel,Hospital hospital,MongoDatabase database, Business business, String doctorName) {
        initComponents();
        this.CardSequencePanel = cardSequencePanel;
        this.hospital = hospital;
        this.database = new Connection().connectToDatabase();
        this.doctorCollection = this.database.getCollection("Doctor");
        this.courseCollection = this.database.getCollection("Course");
        this.doctorResidentCourse = this.database.getCollection("DoctorResidentCourse");
        this.doctorCourse = this.database.getCollection("DoctorCourse");
        txtStudentName.setText(doctorName);
        txtStudentName.setEnabled(false);
        populateResidentDoctorCourseDetailsTable(doctorName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtStudentName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResidentDoctorCourseDetails = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        lblBlogPostHeader = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 228, 230));

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel1.setText("Resident Doctor Name :");

        tblResidentDoctorCourseDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Course Name", "Instrutor", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblResidentDoctorCourseDetails);

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblBlogPostHeader.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblBlogPostHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBlogPostHeader.setText("Resident Doctor Course Details ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblBlogPostHeader)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(lblBlogPostHeader)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBlogPostHeader;
    private javax.swing.JTable tblResidentDoctorCourseDetails;
    private javax.swing.JTextField txtStudentName;
    // End of variables declaration//GEN-END:variables

    private void populateResidentDoctorCourseDetailsTable(String residentDoctorName) {
        DefaultTableModel model = (DefaultTableModel) tblResidentDoctorCourseDetails.getModel();
        model.setRowCount(0); // Clear the table
        System.out.println("Table cleared");

        // Retrieve the doctor ID by name from the Doctor collection for the resident doctor
        Document residentDoctor = crud.getFirstRecordByKey("doctorName", residentDoctorName, doctorCollection);
        if (residentDoctor == null) {
            JOptionPane.showMessageDialog(this, "Resident doctor not found.", "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("Resident doctor not found: " + residentDoctorName);
            return;
        }
        String residentDoctorId = residentDoctor.getObjectId("_id").toString();
        System.out.println("Resident Doctor ID: " + residentDoctorId);

        // Fetch all courses linked to this resident doctor from the DoctorResidentCourse collection
        FindIterable<Document> residentCourses = crud.getRecordsByKey("doctorId", residentDoctorId, doctorResidentCourse);
        MongoCursor<Document> residentCourseCursor = residentCourses.iterator();

        try {
            if (!residentCourseCursor.hasNext()) {
                System.out.println("No courses found for this resident doctor.");
                return;
            }

            while (residentCourseCursor.hasNext()) {
                Document residentCourseDoc = residentCourseCursor.next();
                String courseId = residentCourseDoc.getString("courseId");
                String courseStatus = residentCourseDoc.getString("courseStatus");
                System.out.println("Processing Course ID: " + courseId + " with Status: " + courseStatus);

                // Retrieve the course details from the Course collection
                Document course = crud.getFirstRecordByKey("_id", new ObjectId(courseId), courseCollection);
                if (course == null) {
                    System.out.println("No course found for Course ID: " + courseId);
                    continue;
                }
                String courseName = course.getString("courseName");
                System.out.println("Course Name: " + courseName);

                // Retrieve the instructor's doctor ID from the DoctorCourse collection using the courseId
                Document instructorCourseDoc = crud.getFirstRecordByKey("courseId", courseId.toString(), doctorCourse);
                if (instructorCourseDoc == null) {
                    System.out.println("No instructor found for Course ID: " + courseId);
                    continue;
                }
                String instructorDoctorId = instructorCourseDoc.getString("doctorId");

                // Retrieve the instructor's name from the Doctor collection
                Document instructorDoctor = crud.getFirstRecordByKey("_id", new ObjectId(instructorDoctorId), doctorCollection);
                String instructorDoctorName = (instructorDoctor != null) ? instructorDoctor.getString("doctorName") : "Unknown Instructor";
                System.out.println("Instructor Name: " + instructorDoctorName);

                // Prepare a row for the table
                Object[] row = new Object[3];
                row[0] = courseName;
                row[1] = instructorDoctorName;
                row[2] = courseStatus;
                model.addRow(row); // Add row to the table model
                System.out.println("Row added: " + courseName + ", " + instructorDoctorName + ", " + courseStatus);
            }
        } finally {
            residentCourseCursor.close(); // Ensure the cursor is closed after use
            System.out.println("Cursor closed");
        }
    }


    
}
