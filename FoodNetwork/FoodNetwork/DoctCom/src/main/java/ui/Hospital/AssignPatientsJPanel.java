/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Hospital;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import database.CRUDOperations;
import database.Connection;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.Business.Business;
import model.Hospital.Hospital;
import org.bson.Document;
import org.bson.types.ObjectId;


public class AssignPatientsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AssignPatientsJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    Hospital hospital;
    MongoDatabase database;
    CRUDOperations crud = new CRUDOperations();
    MongoCollection<Document> doctorCollection;
    MongoCollection<Document> patientCollection;
    MongoCollection<Document> doctorPatientCollection;
    public AssignPatientsJPanel(JPanel cardSequencePanel,Hospital hospital,MongoDatabase database, Business business) {
        initComponents();
        this.CardSequencePanel = cardSequencePanel;
        this.hospital = hospital;
        this.database = new Connection().connectToDatabase();
        this.doctorCollection = this.database.getCollection("Doctor");
        this.patientCollection = this.database.getCollection("Patient");
        this.doctorPatientCollection = this.database.getCollection("DoctorPatient");
        populateDoctorComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        AssignedDoctorComboBox = new javax.swing.JComboBox<>();
        txtPatientName = new javax.swing.JTextField();
        txtPatientAddress = new javax.swing.JTextField();
        txtPatientCondition = new javax.swing.JTextField();
        txtPatientVisitDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPatientPhoneNumber = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnAddPatient = new javax.swing.JButton();
        lblBlogPostHeader = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 228, 230));

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel1.setText("Patient Name :");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel2.setText("Address :");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel3.setText("Doctor :");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel4.setText("Condition :");

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel6.setText("Date :");

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel7.setText("Contact:");

        btnAddPatient.setBackground(new java.awt.Color(244, 63, 94));
        btnAddPatient.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnAddPatient.setForeground(new java.awt.Color(255, 255, 255));
        btnAddPatient.setText("Add Patient");
        btnAddPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPatientActionPerformed(evt);
            }
        });

        lblBlogPostHeader.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblBlogPostHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBlogPostHeader.setText("Add New Patient");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtPatientPhoneNumber)
                                .addComponent(txtPatientVisitDate, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtPatientName)
                                .addComponent(txtPatientAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnAddPatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AssignedDoctorComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPatientCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(lblBlogPostHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)))
                .addContainerGap(162, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblBlogPostHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPatientAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPatientPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtPatientVisitDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AssignedDoctorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPatientCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(btnAddPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPatientActionPerformed
        // TODO add your handling code here:
        
         // Extract data from the input fields
        String patientName = txtPatientName.getText().trim();
        String address = txtPatientAddress.getText().trim();
        String phoneNumber = txtPatientPhoneNumber.getText().trim();
        String condition = txtPatientCondition.getText().trim();
        String lastVisit = txtPatientVisitDate.getText().trim();
        
        // Validate the input
        if (patientName.isEmpty() || address.isEmpty() || phoneNumber.isEmpty() || condition.isEmpty() || lastVisit.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields must be filled out", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Validate phone number format (Example: +1 (123) 456-7890)
        if (!phoneNumber.matches("^\\+\\d{1,3} \\(\\d{3}\\) \\d{3}-\\d{4}$")) {
            JOptionPane.showMessageDialog(this, "Phone number must match the format +X (XXX) XXX-XXXX", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate date format (YYYY-MM-DD)
        if (!lastVisit.matches("^\\d{4}-\\d{2}-\\d{2}$")) {
            JOptionPane.showMessageDialog(this, "Date must be in the format YYYY-MM-DD", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if a doctor is selected
        if (AssignedDoctorComboBox.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "No doctor selected", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the selected doctor's ID from the JComboBox (assuming IDs are stored alongside names)
        String doctorName = (String) AssignedDoctorComboBox.getSelectedItem();
        Document doctor = crud.getFirstRecordByKey("doctorName", doctorName, doctorCollection);
        if (doctor == null) {
            JOptionPane.showMessageDialog(this, "Doctor not found in the database", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String doctorId = doctor.getObjectId("_id").toString();

        // Construct the patient document
        Document newPatient = new Document()
            .append("name", patientName)
            .append("address", address)
            .append("phoneNumber", phoneNumber)
            .append("condition", condition)
            .append("lastVisit", lastVisit);

        // Insert the patient into the Patient collection
        try {
            patientCollection.insertOne(newPatient);
            ObjectId patientId = newPatient.getObjectId("_id"); // Retrieve the generated ID for linking

            // Link the patient to the doctor
            Document doctorPatient = new Document()
                .append("patientId", patientId.toString())
                .append("doctorId", doctorId);
            doctorPatientCollection.insertOne(doctorPatient);

            JOptionPane.showMessageDialog(this, "Patient added and assigned to doctor successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            // Optionally, clear fields after successful operation
            txtPatientName.setText("");
            txtPatientAddress.setText("");
            txtPatientPhoneNumber.setText("");
            txtPatientCondition.setText("");
            txtPatientVisitDate.setText("");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error adding patient: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddPatientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AssignedDoctorComboBox;
    private javax.swing.JButton btnAddPatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblBlogPostHeader;
    private javax.swing.JTextField txtPatientAddress;
    private javax.swing.JTextField txtPatientCondition;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtPatientPhoneNumber;
    private javax.swing.JTextField txtPatientVisitDate;
    // End of variables declaration//GEN-END:variables

    private void populateDoctorComboBox() {
        // Clear existing items to avoid duplicates
        AssignedDoctorComboBox.removeAllItems();

        // Query the MongoDB collection for all doctors
        try {
            FindIterable<Document> doctors = doctorCollection.find();
            MongoCursor<Document> cursor = doctors.iterator();

            // Iterate through the doctor documents
            while (cursor.hasNext()) {
                Document doc = cursor.next();
                String doctorName = doc.getString("doctorName");  // Extract the doctor's name
                AssignedDoctorComboBox.addItem(doctorName);  // Add doctor name to the JComboBox
            }
            cursor.close();  // Ensure the cursor is closed after use
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving doctors: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
