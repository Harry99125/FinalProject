/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Hospital;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import database.CRUDOperations;
import database.Connection;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Business.Business;
import model.Hospital.Hospital;
import org.bson.Document;
import org.bson.types.ObjectId;
import ui.Patients.*;
import ui.Patients.*;


public class PatientsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BlogSelectorJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    Hospital hospital;
    MongoDatabase database;
    CRUDOperations crud = new CRUDOperations();
    MongoCollection<Document> doctorCollection;
    MongoCollection<Document> patientCollection;
    MongoCollection<Document> doctorPatientCollection;
    public PatientsJPanel(JPanel cardSequencePanel,Hospital hospital,MongoDatabase database, Business business, String doctorName) {
        initComponents();
        this.CardSequencePanel = cardSequencePanel;
        this.hospital = hospital;
        this.database = new Connection().connectToDatabase();
        this.doctorCollection = this.database.getCollection("Doctor");
        this.patientCollection = this.database.getCollection("Patient");
        this.doctorPatientCollection = this.database.getCollection("DoctorPatient");
        txtDoctorName.setText(doctorName);
        txtDoctorName.setEnabled(false);
        populateTablePatientReportList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePatientReportList = new javax.swing.JTable();
        lblBlogPostHeader = new javax.swing.JLabel();
        btnDeleteBlog = new javax.swing.JButton();
        btnDownloadPatientReport = new javax.swing.JButton();
        txtDoctorName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 228, 230));

        tablePatientReportList.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        tablePatientReportList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Condition", "Last visit", "Address", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablePatientReportList);
        if (tablePatientReportList.getColumnModel().getColumnCount() > 0) {
            tablePatientReportList.getColumnModel().getColumn(0).setResizable(false);
            tablePatientReportList.getColumnModel().getColumn(1).setResizable(false);
            tablePatientReportList.getColumnModel().getColumn(2).setResizable(false);
            tablePatientReportList.getColumnModel().getColumn(3).setResizable(false);
            tablePatientReportList.getColumnModel().getColumn(4).setResizable(false);
        }

        lblBlogPostHeader.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblBlogPostHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBlogPostHeader.setText("Patient List");

        btnDeleteBlog.setBackground(new java.awt.Color(204, 0, 0));
        btnDeleteBlog.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnDeleteBlog.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteBlog.setText("Delete Report");
        btnDeleteBlog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBlogActionPerformed(evt);
            }
        });

        btnDownloadPatientReport.setBackground(new java.awt.Color(0, 153, 51));
        btnDownloadPatientReport.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnDownloadPatientReport.setForeground(new java.awt.Color(255, 255, 255));
        btnDownloadPatientReport.setText("Download Report");
        btnDownloadPatientReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadPatientReportActionPerformed(evt);
            }
        });

        txtDoctorName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorNameActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel1.setText("Doctor Name :");

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(lblBlogPostHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(226, 226, 226))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnDownloadPatientReport, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnDeleteBlog, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDeleteBlog, btnDownloadPatientReport});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblBlogPostHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteBlog, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDownloadPatientReport))
                .addGap(26, 26, 26))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDeleteBlog, btnDownloadPatientReport});

    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteBlogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBlogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteBlogActionPerformed

    private void btnDownloadPatientReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadPatientReportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDownloadPatientReportActionPerformed

    private void txtDoctorNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorNameActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteBlog;
    private javax.swing.JButton btnDownloadPatientReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBlogPostHeader;
    private javax.swing.JTable tablePatientReportList;
    private javax.swing.JTextField txtDoctorName;
    // End of variables declaration//GEN-END:variables

    private void populateTablePatientReportList() {
        DefaultTableModel model = (DefaultTableModel) tablePatientReportList.getModel();
        model.setRowCount(0);  // Clear existing rows to prevent duplicate entries

        // Fetch the doctor's ID using the provided doctor name
        System.out.println("Doctor Name: " + txtDoctorName.getText()); // Check the input text for the doctor's name
        Document doctor = crud.getFirstRecordByKey("doctorName", txtDoctorName.getText(), doctorCollection);
        if (doctor == null) {
            System.out.println("No doctor found with the name: " + txtDoctorName.getText());
            JOptionPane.showMessageDialog(this, "Doctor not found", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        System.out.println("Doctor ID: " + doctor.getObjectId("_id").toString()); // Check the fetched doctor's ID
        String doctorId = doctor.getObjectId("_id").toString();
        
        // Find all linked patients from the DoctorPatient collection using the doctor's ID
        FindIterable<Document> linkedPatients = crud.getRecordsByKey("doctorId", doctorId, doctorPatientCollection);
        MongoCursor<Document> cursor = linkedPatients.iterator();

        // Check if there are linked patients
        try {
            if (!cursor.hasNext()) {
                System.out.println("No linked patients for Doctor ID: " + doctorId);
                JOptionPane.showMessageDialog(this, "No patients are linked to this doctor.", "Information", JOptionPane.INFORMATION_MESSAGE);
                return; // Exit the method if no linked patients are found
            }

            // Iterate over each linked patient ID and fetch details from the Patient collection
            while (cursor.hasNext()) {
                Document doc = cursor.next();
                System.out.println("Linked Patient ID: " + doc.getString("patientId")); // Check linked patient IDs
                String patientId = doc.getString("patientId");
                Document patient = crud.getFirstRecordByKey("_id", new ObjectId(patientId), patientCollection);
                if (patient != null) {
                    System.out.println("Patient Name: " + patient.getString("name")); // Check retrieved patient info
                } else {
                    System.out.println("No patient found with ID: " + doc.getString("patientId"));
                }
                if (patient != null) {
                    Object[] row = new Object[5];
                    row[0] = patient.getString("name");
                    row[1] = patient.getString("condition");
                    row[2] = patient.getString("lastVisit");
                    row[3] = patient.getString("address");
                    row[4] = patient.getString("phoneNumber");
                    model.addRow(row);  // Add row to the table model
                }
            }
        } finally {
            cursor.close(); // Ensure the cursor is closed after use
        }

    }


}
