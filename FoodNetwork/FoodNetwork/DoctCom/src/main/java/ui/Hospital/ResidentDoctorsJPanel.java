/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Hospital;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import database.CRUDOperations;
import database.Connection;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Business.Business;
import model.Hospital.Hospital;
import org.bson.Document;
import org.bson.types.ObjectId;

public class ResidentDoctorsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ResidentDoctorsJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    Hospital hospital;
    MongoDatabase database;
    CRUDOperations crud = new CRUDOperations();
    MongoCollection<Document> doctorCollection;
    MongoCollection<Document> doctorResidentCourseCollection;
    public ResidentDoctorsJPanel(JPanel cardSequencePanel,Hospital hospital,MongoDatabase database, Business business) {
        initComponents();
        this.CardSequencePanel = cardSequencePanel;
        this.hospital = hospital;
        this.database = new Connection().connectToDatabase();
        this.doctorCollection = this.database.getCollection("Doctor");
        this.doctorResidentCourseCollection = this.database.getCollection("DoctorResidentCourse");
        populateTableResidentDoctorList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblResidentDoctorList = new javax.swing.JTable();
        btnAddResidentDoctor = new javax.swing.JButton();
        btnViewDetails = new javax.swing.JButton();
        lblBlogPostHeader = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 228, 230));

        tblResidentDoctorList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Speciality", "Number of Courses"
            }
        ));
        jScrollPane1.setViewportView(tblResidentDoctorList);

        btnAddResidentDoctor.setBackground(new java.awt.Color(244, 63, 94));
        btnAddResidentDoctor.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnAddResidentDoctor.setForeground(new java.awt.Color(255, 255, 255));
        btnAddResidentDoctor.setText("Add Resident Doctor");
        btnAddResidentDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddResidentDoctorActionPerformed(evt);
            }
        });

        btnViewDetails.setBackground(new java.awt.Color(0, 153, 51));
        btnViewDetails.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnViewDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        lblBlogPostHeader.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        lblBlogPostHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBlogPostHeader.setText("Resident Doctor List");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddResidentDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(230, 230, 230)
                            .addComponent(lblBlogPostHeader))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblBlogPostHeader)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddResidentDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewDetails))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAddResidentDoctor, btnViewDetails});

    }// </editor-fold>//GEN-END:initComponents

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblResidentDoctorList.getSelectedRow();
        // Check if a row is actually selected
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a resident doctor from the list first.", "No Resident Doctor Selected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Retrieve the doctor's name from the selected row (assuming column 0 holds the doctorName)
        String selectedDoctorName = (String) tblResidentDoctorList.getValueAt(selectedRowIndex, 0);
        ViewRDDetailsJPanel viewRDDetailsJPanel = new ViewRDDetailsJPanel(CardSequencePanel, hospital, database, business, selectedDoctorName);
        CardSequencePanel.add("ViewRDDetailsJPanel", viewRDDetailsJPanel);
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.next(CardSequencePanel);       
    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void btnAddResidentDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddResidentDoctorActionPerformed
        // TODO add your handling code here:
        AddResidentDoctorJPanel addResidentDoctorJPanel = new AddResidentDoctorJPanel(CardSequencePanel, hospital, database, business);
        CardSequencePanel.add("AddResidentDoctorJPanel", addResidentDoctorJPanel);
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.next(CardSequencePanel);  
    }//GEN-LAST:event_btnAddResidentDoctorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddResidentDoctor;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBlogPostHeader;
    private javax.swing.JTable tblResidentDoctorList;
    // End of variables declaration//GEN-END:variables

    
    private void populateTableResidentDoctorList() {
        DefaultTableModel model = (DefaultTableModel) tblResidentDoctorList.getModel();
        model.setRowCount(0); // Clear existing rows to prevent duplicate entries
        
        // Fetch all doctors who are marked as resident doctors using the correct boolean type for the query
        FindIterable<Document> doctors = crud.getRecordsByKey("isResidentDoctor", true, doctorCollection);
        if (doctors == null) {
            JOptionPane.showMessageDialog(this, "Failed to retrieve data. Please check your database connection.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        MongoCursor<Document> cursor = doctors.iterator();
        if (cursor == null) {
            JOptionPane.showMessageDialog(this, "No resident doctors found or unable to fetch data.", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        try {
            if (!cursor.hasNext()) {
                JOptionPane.showMessageDialog(this, "No resident doctors currently registered.", "Information", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            while (cursor.hasNext()) {
                Document doctor = cursor.next();
                String doctorName = doctor.getString("doctorName");
                String doctorSpecialization = doctor.getString("doctorSpecialization");

                long numberOfCourses = 0;
                if (doctorResidentCourseCollection != null) {
                    // Count how many courses this doctor is linked to in the DoctorResidentCourse collection
                    numberOfCourses = crud.getRecordsByKey("doctorId", doctor.getObjectId("_id").toString(), doctorResidentCourseCollection).into(new ArrayList<>()).size();
                }

                // Prepare a row for the table
                Object[] row = new Object[3];
                row[0] = doctorName;
                row[1] = doctorSpecialization;
                row[2] = numberOfCourses;
                model.addRow(row); // Add row to the table model
            }
        } finally {
            cursor.close(); // Ensure the cursor is closed after use
        }

        //

    }
}
